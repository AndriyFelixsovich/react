import './index.css'
import './XO.css'
import {useState} from "react";


const SYMBOL_X = 'X';
const SYMBOL_O = 'O';

const computeWinner = (cells) => {
    // console.log(cells);
    const lines = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6]
];
    for (let i=0; i < lines.length; i++) {
        const [a,b,c] = lines[i];
        // console.log(cells[a]);
        if (
            cells[a] && cells[a] === cells[b] && cells[a] === cells[c]
        ) {
            // console.log(a,b,c);
            return [a,b,c]
        }
    }
}

export default function App() {

    const [cells, setCells] = useState([null, null, null, null, null, null, null, null, null]);
    const [currentStep, setCurrentStep] = useState(SYMBOL_O);
    const [winner, setWinner] = useState();

    // const currentStep = SYMBOL_O;
    const getSymbolClassName = (symbol) => {
        if (symbol === SYMBOL_O) return 'symbol--o';
        if (symbol === SYMBOL_X) return 'symbol--x';
        return '';
    }

    const handleCellClick = (index) => {
        if (cells[index] || winner) {
            return '';
        }
        const cellsCopy = cells.slice();
        cellsCopy[index] = currentStep;
        const winners = computeWinner(cellsCopy);


        setCells(cellsCopy);
        setCurrentStep(currentStep === SYMBOL_O ? SYMBOL_X : SYMBOL_O)
        setWinner(winners)
    }

    const handleResetClick =() => {
        setCells(Array.from({length:9}, () => null));
        setCurrentStep(SYMBOL_X);
        setWinner(undefined)
    }

    const renderSymbol = (symbol) => <span className={`symbol ${getSymbolClassName(symbol)}`}>{symbol}</span>

    const winnerSymbol = winner ? cells[winner[0]] : undefined
    const isDraw = !winner && cells.filter(value => value).length === 9;

    return (
        <div className="game">
            <GameInfo isDraw={isDraw} winner={winner} currentStep={currentStep} />
            <div className="game-field">
                {cells.map((symbol, index) => {
                    const isWinner = winner?.includes(index);
                    return (
                    <button
                        key={index}
                        className={`cell ${isWinner ? `cell--win` : ''}`}
                        onClick={() => handleCellClick(index)}>
                        {symbol ? renderSymbol(symbol) : null }
                    </button>
                    )})}
            </div>
            <button className={`reset`} onClick={handleResetClick}>Скинути</button>
        </div>
    );

    function GameInfo({isDraw, winner, currentStep}) {
        return (
        <div className="game-info">
            {isDraw ? 'Нічия' : winner ? 'Переможець' : 'Хід'}
            {!isDraw && renderSymbol(winnerSymbol  ?? currentStep)}
        </div>
        )
    }

}

